{"version":3,"sources":["app.global.js","app.js"],"names":["DrawerAppGlobal","apiUrl","window","location","href","includes","map","geocoder","baseLocation","lat","lng","currentUser","document","getElementById","value","colors","COMPATIBLE","NONCOMPATIBLE","VERTEBRATE","INVERTEBRATE","BELT","CELL","mapDataMarkers","mapDataPolys","workMarkers","workPolys","hasHardware","DrawerApp","els","body","getElementsByTagName","mapFilters","filterHandle","toolTips","querySelectorAll","drawer","drawerContainer","drawerNav","drawerNavLinks","addPhotoLinks","cancelPhotoBtns","filterHandleIcons","drawerHandleOpenClose","drawerHandleMaxMin","legendOpenCloseBtns","iconEls","setFilterHandle","classList","toggle","forEach","icon","setDrawerHandleOpenClose","contains","remove","setDrawerHandleMaxMin","setDrawerNavLinks","scrollToLoc","e","preventDefault","locTarget","this","dataset","loc","scrollIntoView","link","addEventListener","setAddPhotoLinks","setVisibility","targetid","setCancelPhotoBtns","resetForm","form","reset","add","setLegendViews","evt","targetContent","currentTarget","targ","targetIcons","id","icons","i","setEventHandlers","tooltipTriggerEl","bootstrap","Tooltip","btn","init","env","utils","getEnvironment","googleErrorMessage","console","log"],"mappings":"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","file":"app.min.js","sourcesContent":["// Global-ish variables for the mapping portion of the app\n\n'use strict' \n\nconst DrawerAppGlobal = {\n\tapiUrl: (window.location.href.includes('localhost:')) ? 'localAPI' : 'prodAPI',\n\tmap: null,\n\tgeocoder: null,\n\tbaseLocation: { lat: 37.09024, lng: -95.712891 },\n\tcurrentUser: document.getElementById('txUsr') == null ? null : document.getElementById('txUsr').value,\n\tcolors: {\n\t\tCOMPATIBLE: '5c821a',\n\t\tNONCOMPATIBLE: 'eb8a44',\n\t\tVERTEBRATE: '4c474a',\n\t\tINVERTEBRATE:  '75b1a9',\n\t\tBELT: '8f61aa',\n\t\tCELL: 'ddabed'\n\t},\n\tmapDataMarkers: [],\n\tmapDataPolys: [],\n\tworkMarkers: [],\n\tworkPolys: [],\n\n\n\thasHardware: false\n};","const DrawerApp = (() => {\n\n\tconst els = {\n\t\tbody: document.getElementsByTagName('body')[0],\n\t\tmap : document.getElementById('map'),\n\t\tmapFilters : document.getElementById('map-filters'),\n\t\tfilterHandle : document.getElementById('filter-handle'),\n\t\ttoolTips : document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'),\n\t\tdrawer : document.getElementById('drawer'),\n\t\tdrawerContainer : document.getElementById('drawer-container'),\n\t\tdrawerNav : document.getElementById('drawer-nav'),\n\t\tdrawerNavLinks : document.querySelectorAll('.js-drawerNavLink'),\n\t\taddPhotoLinks : document.querySelectorAll('.js-drawerPhotoLink'),\n\t\tcancelPhotoBtns : document.querySelectorAll('.js-cancelPhotoBtn'),\n\t\tfilterHandleIcons : document.querySelectorAll('.js-filterHandleIcon'),\n\t\tdrawerHandleOpenClose : document.getElementById('drawer-openclose'),\n\t\tdrawerHandleMaxMin : document.getElementById('drawer-maxmin'),\n\t\tlegendOpenCloseBtns : document.querySelectorAll('.js-shrinkTrigger')\n\t};\n\n\t//Icons get rewritten on load with SVGs. Have to do the lookups w/i the Fn.\n\tconst iconEls = {\n\t\tfilterHandleIcons : '.js-filterHandleIcon',\n\t\tdrawerHandleDirectionIcons : '.js-drawerHandleDirectionIcon',\n\t\tdrawerHandleMaxMinIcons : '.js-drawerHandleMaxMinIcon'\n\t};\n\n\tconst utils = {\n\t\tgetEnvironment: () => {\n\t\t\tconst url = window.location.href;\n\t\t\treturn (url.includes('localhost:')) ? 'DEV' : 'PROD';\n\t\t},\n\n\t\tgoogleErrorMessage: () => {\n\t\t\tconsole.log('DrawerApp googleErrorMessage: This would be an error message.');\n\t\t}\n\t};\n\t/**\n\t * \n\t * @param {*} thing \n\t */\n\tconst setBaseMap = (thing) => {\n        map = new google.maps.Map(els.map,\n        {\n            center: { lat: 41.159501, lng: -81.440390},\n            zoom: 10\n        });\n\n        window.gm_authFailure = function() {\n            // remove the map div or maybe call another API to load map\n            // maybe display a useful message to the user\n            DrawerApp.utils.googleErrorMessage();\n        }\n    };\n\n\tconst setTooltips = () => {\n\t\tconst tooltipTriggerList = els.toolTips;\n\t\t[...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));\n\t\t\n\t};\n\n\tconst setFilterHandle = () => {\n\t\tels.mapFilters.classList.toggle('d-none');\n\t\tdocument.querySelectorAll(iconEls.filterHandleIcons).forEach((icon) => {\n\t\t\ticon.classList.toggle('d-none');\n\t\t});\t\n\t};\n\n\tconst setDrawerHandleOpenClose = () => {\n\t\tels.drawerContainer.classList.toggle('-is-closed');\n\t\tels.drawerNav.classList.toggle('-is-closed');\n\t\tdocument.querySelectorAll(iconEls.drawerHandleDirectionIcons).forEach((icon) => {\n\t\t\ticon.classList.toggle('d-none');\n\t\t});\n\n\n\t\tif (els.drawerContainer.classList.contains('-is-closed')) {\n\t\t\tels.body.classList.remove('-is-max');\n\t\t}\n\t};\n\n\tconst setDrawerHandleMaxMin = () => {\n\t\tels.body.classList.toggle('-is-max');\n\t\tels.drawerContainer.classList.toggle('-is-max');\n\t\tels.drawerContainer.classList.remove('-is-closed');\n\t\tdocument.querySelectorAll(iconEls.drawerHandleMaxMinIcons).forEach((icon) => {\n\t\t\ticon.classList.toggle('d-none');\n\t\t});\n\t};\n\n\tconst setDrawerNavLinks = () => {\n\t\tfunction scrollToLoc(e) {\n\t\t\te.preventDefault();\n\t\t\tconst locTarget = this.dataset.loc;\n\t\t\tconst loc = document.getElementById(locTarget);\n\t\t\tloc.scrollIntoView();\n\t\t};\n\n\t\tels.drawerNavLinks.forEach((link) => {\n\t\t\tlink.addEventListener('click', scrollToLoc, false);\n\t\t});\n\t};\n\n\tconst setAddPhotoLinks = () => {\n\t\tfunction setVisibility(e) {\n\t\t\te.preventDefault();\n\t\t\tconst locTarget = this.dataset.targetid;\n\t\t\tdocument.getElementById(locTarget).classList.remove('d-none');\n\t\t};\n\t\t\n\t\tels.addPhotoLinks.forEach((link) => {\n\t\t\tlink.addEventListener('click', setVisibility, false);\n\t\t});\n\t};\n\n\tconst setCancelPhotoBtns = () => {\n\t\tfunction resetForm(e) {\n\t\t\te.preventDefault();\n\t\t\tconst locTarget = this.dataset.targetid;\n\t\t\tconst form = document.getElementById(locTarget);\n\t\t\tform.reset();\n\t\t\tform.classList.add('d-none');\n\t\t};\n\t\t\n\t\tels.cancelPhotoBtns.forEach((link) => {\n\t\t\tlink.addEventListener('click', resetForm, true);\n\t\t});\n\t};\n\n\tconst setLegendViews = (evt) => {\n\t\tconst targetContent = document.getElementById(evt.currentTarget.dataset.targ);\n\t\tconst targetIcons = `#${evt.currentTarget.id} .js-openCloseIcon`;\n\t\tconst icons = document.querySelectorAll(`${targetIcons}`);\n\n\t\ttargetContent.classList.toggle('d-none');\n\t\ticons.forEach((icon, i) => {\n\t\t\ticon.classList.toggle('d-none');\n\t\t});\n\t};\n\n\tconst setEventHandlers = () => {\n\t\tsetTooltips();\n\t\tsetDrawerNavLinks();\n\t\tsetAddPhotoLinks();\n\t\tsetCancelPhotoBtns();\n\n\t\tels.filterHandle.addEventListener('click', setFilterHandle, false);\n\t\tels.drawerHandleOpenClose.addEventListener('click', setDrawerHandleOpenClose, false);\n\t\tels.drawerHandleMaxMin.addEventListener('click', setDrawerHandleMaxMin, false);\n\t\tels.legendOpenCloseBtns.forEach((btn) => { btn.addEventListener('click', setLegendViews, false) });\n\t};\n\n\tconst init = () => {\n\t\tDrawerApp.env = DrawerApp.utils.getEnvironment();\n\t\tsetEventHandlers();\n\t\t//setBaseMap();\n\t};\n\n\n\treturn {\n\t\tinit,\n\t\tutils,\n\t\tels, \n\t};\n\n})();\n\t"]}